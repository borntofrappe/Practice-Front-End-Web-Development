@import url("https://fonts.googleapis.com/css?family=Fira+Mono|ZCOOL+KuaiLe");

/* choosing a purple/blue palette */
:root {
  --color-bg: #0d095a;
  --color-bg-l: #1b1994;
  --color-main: #003868;
  --color-accent: #0085fa;
  --color-mark: #0085fa44;
  --color-text: #f0fff0;
}
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}
/* for the background of the application, overlap two repeating-radial-gradient using the transparent keyword to create a nice cut-out pattern */
body {
  min-height: 100vh;
  background: repeating-radial-gradient(
      circle at 50% 100%,
      var(--color-bg-l),
      var(--color-bg-l) 10px,
      transparent 11px,
      transparent 20px,
      var(--color-bg-l) 22px
    ),
    repeating-radial-gradient(
      circle at 50% 0%,
      var(--color-bg-l),
      var(--color-bg-l) 10px,
      transparent 11px,
      transparent 20px,
      var(--color-bg-l) 22px
    ),
    var(--color-bg);
  color: var(--color-text);
  font-family: "IBM Plex Mono", monospace;
  /* center the application horizontally */
  display: flex;
  flex-direction: column;
  align-items: center;
  padding: 1rem;
}

/* cap the width of the main container and display the nested elements in a column */
main.app {
  max-width: 500px;
  width: 90vw;
  display: flex;
  flex-direction: column;
  background: var(--color-main);
  box-shadow: 0 2px 15px var(--color-bg);
  border-radius: 10px;
  padding: 1rem 1rem 1.5rem;
}

/* give the heading a negative margin value for the sides and the top, as to apply the background to the entirety of the 1rem padded container */
main.app h1 {
  margin: -1rem -1rem 1rem;
  padding: 1rem;
  font-family: "ZCOOL KuaiLe", cursive;
  border-radius: 10px 10px 0 0;
  background: var(--color-accent);
  color: var(--color-text);
  text-align: center;
  font-weight: 300;
  text-shadow: 0 1px 1px var(--color-bg-l);
  box-shadow: 0 10px 5px var(--color-main);
}
/* position the SVG icon in the center of the application, with a negative margin-bottom to visually link the icon and the following textarea element */
main.app svg#icon {
  width: 82px;
  height: 82px;
  margin: 1rem 0 -0.5rem;
  align-self: center;
  /* z-index to have the icon on top */
  z-index: 100;
}
/* horizontally center the textarea+button elements, on top of one another  */
section.app__features {
  display: flex;
  flex-direction: column;
  align-items: center;
  padding: 0 1rem;
}
/* stretch the textarea element to span the entirety of the (padded) width */
section.app__features #features--text {
  width: 100%;
  /* fix the height and allow for vertical scroll */
  height: 200px;
  overflow-y: auto;
  border-radius: 10px;
  background: var(--color-bg);
  color: var(--color-text);
  /* slightly larget padding at the top to offset the SVG icon above */
  padding: 1rem;
  padding-top: 1.5rem;
  line-height: 2;
}
/* include the placeholder as a string of text, through the before pseudo element and only as long as the div is empty */
section.app__features #features--text:empty:before {
  content: "Write something here, hit the mic and behold, the program talks back!";
  opacity: 0.5;
}
/* style the mark elements injected in the div with the colors of the application */
section.app__features #features--text mark {
  background: var(--color-mark);
  border-bottom: 1px solid var(--color-accent);
  color: inherit;
}
/* position the three buttons side by side */
section.app__features .features--buttons {
  display: flex;
  width: 100%;
  align-items: center;
  justify-content: space-evenly;
}
/* style the button to nest the icon in a small circle */
section.app__features button {
  margin: 2rem 0 3rem;
  width: 42px;
  height: 42px;
  background: none;
  border: none;
  color: var(--color-accent);
  background: var(--color-bg);
  padding: 0.35rem;
  border-radius: 50%;
}
/*
position relative for the before pseudo element, applied only on the central button, and through a class of active
made slightly bigger than the other two
*/
section.app__features .button--speak {
  width: 52px;
  height: 52px;
  position: relative;
  opacity: 0.7;
  transition: all 0.25s ease-out;
  transform: scale(0.5);
}
section.app__features .button--speak.active {
  opacity: 1;
  transform: scale(1);
  /* slight delay as the class is added, to transition the button as the other two are hidden back */
  transition-delay: 0.18s;
}
/* through the pseudo element create a pulsating animation, made up of an expanding and dissipating repeating-radial-gradient */
section.app__features .button--speak.active:before {
  content: "";
  position: absolute;
  top: 50%;
  left: 50%;
  width: 100%;
  height: 100%;
  border-radius: 50%;
  background: repeating-radial-gradient(
    circle at 50% 50%,
    var(--color-bg),
    var(--color-bg) 2px,
    transparent 3px,
    transparent 4px
  );
  transform: translate(-50%, -50%) scale(0);
  opacity: 1;
}
/* on hover apply the animation */
section.app__features .button--speak.active:hover:before {
  animation: pulse 2.5s infinite ease-out;
}
/* animation expanding and dissipating the pseudo element */
@keyframes pulse {
  25% {
    opacity: 1;
  }
  50%,
  100% {
    transform: translate(-50%, -50%) scale(2);
    opacity: 0;
  }
}
/* by default hide the smaller buttons, and show them through a class.active, as long as the program is speaking  */
section.app__features .button--toggle,
section.app__features .button--stop {
  opacity: 0;
  visibility: hidden;
  transition: all 0.35s ease-out;
}
section.app__features .button--toggle {
  transform: translateX(5rem) rotate(0.25turn);
}
section.app__features .button--stop {
  transform: translateX(-5rem) rotate(-0.25turn);
}
section.app__features .button--toggle.active,
section.app__features .button--stop.active {
  opacity: 1;
  visibility: visible;
  transform: translateX(0) rotate(0);
}

section.app__features button svg {
  width: 100%;
  height: 100%;
  pointer-events: none;
  filter: drop-shadow(0 1px 5px var(--color-bg));
}

/* for the section devoted to the controls, position the child elements in a centered column */
section.app__controls {
  line-height: 2;
  display: flex;
  flex-direction: column;
  align-items: center;
  padding: 0 1.5rem;
}
/* for each div devoted to label+input elements, describe them side by side
and vertically centered */
div.controls {
  width: 100%;
  display: flex;
  align-items: center;
  margin: 0.5rem 0;
}
/* each label+input is made out to be 1/4 and 3/4 respectively, by applying the flex-grow property and setting the width to 0 */
div.controls label {
  width: 0;
  flex-grow: 1;
  text-align: center;
  color: var(--color-accent);
  /* center the span+icon vertically, and space them out evenly */
  display: flex;
  align-items: center;
  justify-content: space-evenly;
}
/* by default hide the span shown in each container, show them on hover */
div.controls label span {
  opacity: 0;
  visibility: hidden;
  text-transform: uppercase;
  transition: all 0.25s ease-out;
  transform: translateX(1rem);
  font-size: 1.1rem;
  /* apply the same trick used for the label+input to the span+svg, to have these svg icons perfectly aligned */
  width: 0;
  flex-grow: 1;
}
div.controls:hover label span {
  opacity: 1;
  visibility: visible;
  transform: translateX(0rem);
}

/* reduce notably the size of the icons */
div.controls label svg {
  width: 32px;
  height: 32px;
  width: 0;
  flex-grow: 1;
}
div.controls input {
  flex-grow: 3;
  width: 0;
  margin: 0 1rem;
}

/* style the inputs of type range with the described color palette */
input[type="range"] {
  -webkit-appearance: none;
  background: var(--color-bg);
}
input[type="range"]::-webkit-slider-thumb {
  -webkit-appearance: none;
  width: 10px;
  height: 10px;
  background: var(--color-accent);
}
/* style a possible scrollbar with the same reasoning applied to the input elements */
section.app__features #features--text::-webkit-scrollbar {
  width: 0.4rem;
}
section.app__features #features--text::-webkit-scrollbar-track {
  background: var(--color-bg-l);
}
section.app__features #features--text::-webkit-scrollbar-thumb {
  background: var(--color-text);
  border-radius: 5px;
}
