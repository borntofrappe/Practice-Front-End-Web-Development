@import url("https://fonts.googleapis.com/css?family=Lato");
:root {
  --font-main: 'Lato', sans-serif;
  --color-txt: #ededed;
  --color-bg: #252525;
}
* {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
}
body {
  min-height: 100vh;
  width: 100%;
  font-family: var(--font-main);
  color: var(--color-txt);
  background-color: var(--color-bg);
}

.container {
  /* spread the container div to cover the entire width and height of the page */
  width: 100%;
  height: 100vh;
  /* display the button in the bottom center of the page */
  display: flex;
  justify-content: center;
  align-items: flex-end;
}

.container button {
  /* push the button a little away from the bottom edge of the screen */
  margin: 2rem 0;

  /* reset the style of the button */
  background: none;
  border: none;
  outline: none;
  color: inherit;
  font-family: inherit;

  /* style the text inside the button */
  padding: 0.5rem 1.2rem;
  font-size: 1.3rem;
  letter-spacing: 0.1rem;
  font-weight: bold;

  /* set a transition for the hover and active states */
  transition: all 0.5s ease-out;
  /* position relative to absolute position the pseudo elements */
  position: relative;
}

.container button:after {
  /* for the after pseudo-element, create a line which is transitioned from the middle outwards */
  content: '';
  position: absolute;
  top: 0;
  left: 50%;
  width: 0;
  height: 2px;
  background: white;
  opacity: 0;
  transition: all 0.4s ease-out;  
}
.container button:hover:after {
  left: 0;
  opacity: 0.5;
  width: 100%;
}
.container button:before {
  /* for the before pseudo-element, transition the appearance of a border, following the transition of the prior pseudo-element */
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  border: none;
  opacity: 0;
  transition: all 0.4s ease-out;  
  transition-delay: 0.3s;
}
.container button:hover:before {
  opacity: 0.5;
  border-top: none;
  border: 1px solid white;
}
.container button:active {
  background: rgba(255,255,255,0.1);
}

.panel-toggle {
  /* 
  position the panel in the center of the screen, atop the button
    but at first, position the div below the button itself (for a slideUp animation)
    and at first, hide it with the properties of opacity and visibility
  */
  position: absolute;
  bottom: 0;
  visibility: hidden;
  opacity: 0;

  width: 80vw;
  max-width: 800px;
  color: var(--color-bg);
  background: var(--color-txt);
  padding: 2rem 3rem;
}
.panel-toggle h1 {
  margin: 1rem 0;
}
.panel-toggle h2 {
  margin: 0.8rem 0;
}
.panel-toggle p {
  font-size: 1.15rem;
  line-height: 1.4;
}
.panel-toggle a {
  color: inherit;
  text-decoration: none;
  font-weight: bold;
  /* transition for the hover state */
  transition: all 0.3s ease-out; 
}
.panel-toggle a:hover {
  color: yellowgreen;
}

/* 
for the panel, define a class which triggers an animation
  class which is toggled at the click of the button
*/
.toggle-panel {
  /* animate the panel to slide up and appear on screen */
  animation: togglePanel 0.55s cubic-bezier(.28,0,.6,2) forwards;
}
.toggle-panel h1, .toggle-panel h2, .toggle-panel p {
  /* animate the contents of the panel to appear on screen, each with its own incremental delay */
  animation: toggleText 0.7s 0.6s ease-out forwards;
  opacity: 0;
}
.toggle-panel p:nth-of-type(1) {
  animation-delay: 0.7s;
}
.toggle-panel h2:nth-of-type(1) {
  animation-delay: 0.8s;
}
.toggle-panel p:nth-of-type(2) {
  animation-delay: 0.9s;
}
.toggle-panel h2:nth-of-type(2) {
  animation-delay: 1s;
}
.toggle-panel p:nth-of-type(3) {
  animation-delay: 1.1s;
}
.toggle-panel p:nth-of-type(4) {
  animation-delay: 1.3s;
}

/* the animation for the panel changes the vertical position all the while, while chaging opacity only while the vertical distance is already halfway through */
@keyframes togglePanel {
  0% {
    opacity: 0;
    visibility: hidden;
    bottom: 0;
  }
  50% {
    opacity: 0;
    visibility: hidden;
  }
  100% {
    opacity: 1;
    visibility: visible;
    bottom: 6rem;
  }
}

/* the animation for the text in the panel changes the opacity */
@keyframes toggleText {
  to {
    opacity: 1;
  }
}