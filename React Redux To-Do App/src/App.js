import React, { Component } from 'react';
import './App.css';
import InputArea from './InputArea';
import OutputArea from './OutputArea';

// import connect to include the action reducers in the component
import { connect } from 'react-redux';
// import the action creators
import { addTodoAction, removeTodoAction } from './Redux/actionCreators'
// connect and the action creators are included after the component is instantiated


// through a single stateful component, render two stateless components for the input and output area
// include the input area after the output one to have the input of type="text" be displayed below the div showing the different list items 
class App extends Component {
  constructor(props) {
    super(props);
    /*
    bind two methods
    - one which handles the onSubmit event on the form element
    - one which handles the onClick event on the different list items 
    */
    this.handleSubmit = this.handleSubmit.bind(this);
    this.handleClick = this.handleClick.bind(this);
  }
  /*
  through the handleSubmit method, push in the array found in the store the text of the input element 
  as the array is passed to the output area, this will map through the array to display each item in a separate list item 
  */
  handleSubmit(e) {
    // e.target refers to the form element, which nests the input and button elements
    e.preventDefault();
    let form = e.target;
    let input = form.querySelector("input");
    let inputValue = input.value;
    
    // include the todo item if text is actually present in the input
    if(inputValue !== "") {
      // invoke the addTodo action creator which dispatches the action of type "ADD_TODO" to the reducer of the store, and adds the item to the array of todo items
      this.props.addTodo(inputValue);
      // remove any text that was present in the input element
      input.value = "";
    }
  }

  /*
  through the handleClick method, the list item which is clicked in the output area is removed from the todo array
  */
  handleClick(e) {
    // each list item is given a special data-key attribute which correspond to the index in the array 
    let indexOfClicked = e.target.getAttribute("data-key");
    // invoke the removeTodo action creator, which dispatches the action of type "REMOVE_TODO" to the reducer
    this.props.removeTodo(indexOfClicked);
  }

  // while rendering the child components, instead of passing the array from the state of the component, include it from the store, through the props generated by the connect function (which follows below)
  render() {
    return (
      <div className="App">
        {/* the output area considers the array of to-dos and the handleClick method */}
        <OutputArea todo={this.props.todo} handleClick={this.handleClick} />
        {/* the input area considers the handleSubmit method only */}
        <InputArea handleSubmit={this.handleSubmit} />
      </div>
    );
  }
}


// connect the component with the state and action creators defined through the store and redux in general
const mapStateToProps = (state) => {
  // when mapping the state, return the todo field, accessible through this.props.todo
  return {todo: state.todo}
};

const mapDispatchToProps = (dispatch) => {
  // when mapping the dispatching function, return the addTodo and removeTodo field, each directing toward the respective action creator and including the required arguments
  // these are accessible through this.props.addTodo() and this.props.removeTodo() respectively
  return {
    addTodo: (todoItem) => {
      dispatch(addTodoAction(todoItem))
    },
    removeTodo: (index) => {
      dispatch(removeTodoAction(index))
    }
  }
};

// includ the redux logic in the component
App = connect(mapStateToProps, mapDispatchToProps)(App);

export default App;
