/* import font(s) */
@import url("https://fonts.googleapis.com/css?family=Work+Sans:400,900");

/* custom variables */
:root {
  /* font and colors */
  --font: "Work Sans", sans-serif;
  --color-text: #141414;
  --color-tip: #e5d1ae;
  --color-shadow: #491757;
  --color-sun: #ecd826;
  --color-bg: #9537b0;

  /* variables updated in the js script and affecting the matching properties for the pseudo element connected to the heading
  the idea is to alter these properties in between a range

  rough considerations:

  - transform-origin changes according to the horizontal coordinate, in the [100%, 0] range going left to right
  - rotateZ changes again according to the horizontal coordinate, in the [20deg, -20deg] range going left to right

  - rotateX changes according to the vertical coordinate, in the [75-90] range bottom to top
  - scaleY follows the same vertical coordinate, going [1, 15] top to bottom
  */
  --origin: 100% 100%;
  --rotateZ: 20deg;

  --rotateX: 75deg;

  --scaleY: 1;
}

* {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
}

body {
  min-height: 90vh;
  width: 100%;
  font-family: var(--font);
  color: var(--color-text);
  background: var(--color-bg);
  /* position the text in the bottom center of the page */
  display: grid;
  place-items: end center;
  overflow: hidden;
}

/* heading with considerable letter-spacing as to make the shadow more noticeable */
h1 {
  font-size: 4.5rem;
  font-weight: 900;
  letter-spacing: 0.5rem;
  text-transform: uppercase;
  pointer-events: none;
  text-align: center;
  /* position relative for the pseudo element */
  position: relative;
}

/* it is actually the pseudo element to create the shadow, including the same string, but with the values for the transform and transform-origin properties specified through the custom properties */
h1:before {
  color: var(--color-shadow);
  opacity: 0.5;
  top: 0;
  left: 0;
  position: absolute;
  content: "Shadow";
  transform-origin: var(--origin);
  transform: translateY(-10px) rotateX(var(--rotateX)) rotateZ(var(--rotateZ))
    scaleY(var(--scaleY));
  z-index: -5;
}

/* for the light source, absolute position it in the top left of the page
add considerable padding as to increase the surface area of the element (to more easily interact through mouse events)
*/
.sun {
  position: absolute;
  top: 10px;
  left: 10px;
  padding: 1.5rem;
  border-radius: 50%;
  background: var(--color-sun);
  box-shadow: 0 0 10px 1rem var(--color-sun);
}
/* when adding a class slightly change the scale to give the subtle impression of a changing source light  */
.sun.dither {
  animation: dither 1s infinite alternate ease-out;
}

/* for the paragraph explaining the light source, display it next to the light source and add an animation to remove it once the visitor has been able to read the text */
p {
  position: absolute;
  font-weight: 400;
  top: 3.5rem;
  left: 5.5rem;
  color: var(--color-tip);
  animation: enough 0.3s 3.5s ease-out forwards;
}
/* through a pseudo element and an SVG element, point towad the light source */
p:after {
  content: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 150"><path d="M 60 150 v -50 a 40 50 0 0 0 -40 -50" fill="none" stroke="#E5D1AE" stroke-width="15" stroke-linejoin="round"/><path d="M 10 50 l 20 -20 v 40 z"  fill="none" stroke="#E5D1AE" stroke-width="10"/></svg>');
  width: 20px;
  height: 30px;
  left: 0;
  bottom: 100%;
  position: absolute;
}

/* animation scaling the light source up */
@keyframes dither {
  to {
    transform: scale(1.1);
  }
}

/* animation removing the paragraph from sight */
@keyframes enough {
  to {
    opacity: 0;
    visibility: hidden;
  }
}
